Common configuration elements
=============================

.. _envoy_api_msg_Locality:

Locality
--------

Identifies location of where either Envoy runs or where upstream hosts run.

.. code-block:: json

  {
    "region": "...",
    "zone": "...",
    "sub_zone": "..."
  }

.. _envoy_api_field_Locality.region:

region
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Region this zone belongs to.
  
  
.. _envoy_api_field_Locality.zone:

zone
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Availability Zone (AZ) in AWS, Zone in GCP.
  
  
.. _envoy_api_field_Locality.sub_zone:

sub_zone
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) When used for locality of upstream hosts, this field further splits zone
  into smaller chunks of sub_zones so they can be load balanced
  independently
  
  


.. _envoy_api_msg_Node:

Node
----

Identifies a specific Envoy instance. Remote server may have per Envoy configuration.

.. code-block:: json

  {
    "id": "...",
    "cluster": "...",
    "metadata": "{...}",
    "locality": "{...}",
    "build_version": "..."
  }

.. _envoy_api_field_Node.id:

id
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) An opaque node identifier for the Envoy node. This must be set.
  
  
.. _envoy_api_field_Node.cluster:

cluster
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The cluster that the Envoy node belongs to. This must be set.
  
  
.. _envoy_api_field_Node.metadata:

metadata
  (`Struct <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct>`_) 
  
.. _envoy_api_field_Node.locality:

locality
  (:ref:`Locality <envoy_api_msg_Locality>`) 
  
.. _envoy_api_field_Node.build_version:

build_version
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) This is motivated by informing a management server during canary which
  version of Envoy is being tested in a heterogeneous fleet.
  
  


.. _envoy_api_msg_Endpoint:

Endpoint
--------


.. code-block:: json

  {
    "address": "{...}"
  }

.. _envoy_api_field_Endpoint.address:

address
  (:ref:`Address <envoy_api_msg_Address>`) 
  


.. _envoy_api_msg_Metadata:

Metadata
--------

Metadata provides additional inputs to filters based on matched listeners,
filter chains, routes and endpoints. It is structured as a map from filter
name (in reverse DNS format) to metadata specific to the filter. Metadata
key-values for a filter are merged as connection and request handling occurs,
with later values for the same key overriding earlier values.

An example use of metadata is providing additional values to
http_connection_manager in the envoy.http_connection_manager.access_log
namespace.

For load balancing, Metadata provides a means to subset cluster endpoints.
Endpoints have a Metadata object associated and routes contain a Metadata
object to match against. There are some well defined metadata used today for
this purpose:

* {"envoy.lb": {"canary": <bool> }}. This indicates the canary status of an
  endpoint and is also used during header processing
  (x-envoy-upstream-canary) and for stats purposes.

.. code-block:: json

  {
    "filter_metadata": "{...}"
  }

.. _envoy_api_field_Metadata.filter_metadata:

filter_metadata
  (map<`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, `Struct <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct>`_>) Key is the reverse DNS filter name.
  
  


.. _envoy_api_msg_RuntimeUInt32:

RuntimeUInt32
-------------

Runtime derived uint32 with a default when not specified.

.. code-block:: json

  {
    "default_value": "...",
    "runtime_key": "..."
  }

.. _envoy_api_field_RuntimeUInt32.default_value:

default_value
  (`uint32 <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Default value if runtime value is not available.
  
  
.. _envoy_api_field_RuntimeUInt32.runtime_key:

runtime_key
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Runtime key to get value for comparision. This value is used if defined.
  
  


.. _envoy_api_msg_HeaderValue:

HeaderValue
-----------

Header name/value pair.

.. code-block:: json

  {
    "key": "...",
    "value": "..."
  }

.. _envoy_api_field_HeaderValue.key:

key
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Header name.
  
  
.. _envoy_api_field_HeaderValue.value:

value
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Header value.
  
  


.. _envoy_api_msg_HeaderValueOption:

HeaderValueOption
-----------------

Header name/value pair plus option to control append behavior.

.. code-block:: json

  {
    "header": "{...}",
    "append": "{...}"
  }

.. _envoy_api_field_HeaderValueOption.header:

header
  (:ref:`HeaderValue <envoy_api_msg_HeaderValue>`) Header Name/Value pair that this option applies to.
  
  The same format specifier as used for HTTP access logging applies here,
  however unknown header values are replaced with the empty string instead
  of -. [V2-API-DIFF].
  
  
.. _envoy_api_field_HeaderValueOption.append:

append
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) Should the value be appended? If true (default), the value is appended to
  existing values [V2-API-DIFF].
  
  


.. _envoy_api_msg_ApiConfigSource:

ApiConfigSource
---------------


.. code-block:: json

  {
    "api_type": "...",
    "cluster_name": [],
    "refresh_delay": "{...}"
  }

.. _envoy_api_field_ApiConfigSource.api_type:

api_type
  (:ref:`ApiConfigSource.ApiType <envoy_api_enum_ApiConfigSource.ApiType>`) 
  
.. _envoy_api_field_ApiConfigSource.cluster_name:

cluster_name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Multiple cluster names may be provided. If > 1 cluster is defined, clusters
  will be cycled through if any kind of failure occurs.
  
  
.. _envoy_api_field_ApiConfigSource.refresh_delay:

refresh_delay
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) For REST APIs, the delay between successive polls.
  
  

.. _envoy_api_enum_ApiConfigSource.ApiType:

Enum ApiConfigSource.ApiType
----------------------------

APIs may be fetched via either REST or gRPC.

.. _envoy_api_enum_value_ApiConfigSource.ApiType.REST_LEGACY:

REST_LEGACY
  *(DEFAULT)* ⁣REST legacy corresponds to the v1 API.
  
  
.. _envoy_api_enum_value_ApiConfigSource.ApiType.REST:

REST
  ⁣
  
.. _envoy_api_enum_value_ApiConfigSource.ApiType.GRPC:

GRPC
  ⁣
  

.. _envoy_api_msg_AggregatedConfigSource:

AggregatedConfigSource
----------------------

ADS will be used to fetch resources.

.. code-block:: json

  {

  }




.. _envoy_api_msg_ConfigSource:

ConfigSource
------------

Configuration for listeners, clusters, routes, endpoints etc. may either be
sourced from the filesystem or from an API source. Filesystem configs are
watched with inotify for updates.

.. code-block:: json

  {
    "path": "...",
    "api_config_source": "{...}",
    "ads": "{...}"
  }

.. _envoy_api_field_ConfigSource.path:

path
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) 
  
  Only one of path, api_config_source, ads may be set.
  
.. _envoy_api_field_ConfigSource.api_config_source:

api_config_source
  (:ref:`ApiConfigSource <envoy_api_msg_ApiConfigSource>`) 
  
  Only one of path, api_config_source, ads may be set.
  
.. _envoy_api_field_ConfigSource.ads:

ads
  (:ref:`AggregatedConfigSource <envoy_api_msg_AggregatedConfigSource>`) 
  
  Only one of path, api_config_source, ads may be set.
  


.. _envoy_api_msg_TransportSocket:

TransportSocket
---------------

Configuration for transport socket in listeners and clusters. If the configuration is empty,
a default transport socket implementation and configuration will be chosen based on the
platform and existence of tls_context.

.. code-block:: json

  {
    "name": "...",
    "config": "{...}"
  }

.. _envoy_api_field_TransportSocket.name:

name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The name of the transport socket to instantiate. The name must match a supported transport
  socket implementation.
  
  
.. _envoy_api_field_TransportSocket.config:

config
  (`Struct <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct>`_) Implementation specific configuration which depends on the implementation being instantiated.
  See the supported transport socket implementations for further documentation.
  
  

.. _envoy_api_enum_RoutingPriority:

Enum RoutingPriority
--------------------

Envoy supports upstream priority routing both at the route and the virtual
cluster level. The current priority implementation uses different connection
pool and circuit breaking settings for each priority level. This means that
even for HTTP/2 requests, two physical connections will be used to an
upstream host. In the future Envoy will likely support true HTTP/2 priority
over a single upstream connection.

.. _envoy_api_enum_value_RoutingPriority.DEFAULT:

DEFAULT
  *(DEFAULT)* ⁣
  
.. _envoy_api_enum_value_RoutingPriority.HIGH:

HIGH
  ⁣
  

.. _envoy_api_enum_RequestMethod:

Enum RequestMethod
------------------

HTTP request method

.. _envoy_api_enum_value_RequestMethod.METHOD_UNSPECIFIED:

METHOD_UNSPECIFIED
  *(DEFAULT)* ⁣
  
.. _envoy_api_enum_value_RequestMethod.GET:

GET
  ⁣
  
.. _envoy_api_enum_value_RequestMethod.HEAD:

HEAD
  ⁣
  
.. _envoy_api_enum_value_RequestMethod.POST:

POST
  ⁣
  
.. _envoy_api_enum_value_RequestMethod.PUT:

PUT
  ⁣
  
.. _envoy_api_enum_value_RequestMethod.DELETE:

DELETE
  ⁣
  
.. _envoy_api_enum_value_RequestMethod.CONNECT:

CONNECT
  ⁣
  
.. _envoy_api_enum_value_RequestMethod.OPTIONS:

OPTIONS
  ⁣
  
.. _envoy_api_enum_value_RequestMethod.TRACE:

TRACE
  ⁣
  
