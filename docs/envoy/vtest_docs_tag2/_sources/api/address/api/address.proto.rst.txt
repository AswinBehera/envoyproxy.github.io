Network related configuration elements
======================================

[V2-API-DIFF] Addresses now have .proto structure.

.. _envoy_api_msg_Pipe:

Pipe
----


.. code-block:: json

  {
    "path": "..."
  }

.. _envoy_api_field_Pipe.path:

path
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) 
  


.. _envoy_api_msg_SocketAddress:

SocketAddress
-------------


.. code-block:: json

  {
    "protocol": "...",
    "address": "...",
    "port_value": "...",
    "named_port": "...",
    "resolver_name": "..."
  }

.. _envoy_api_field_SocketAddress.protocol:

protocol
  (:ref:`SocketAddress.Protocol <envoy_api_enum_SocketAddress.Protocol>`) 
  
.. _envoy_api_field_SocketAddress.address:

address
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The address for this socket.  Listeners will bind to the address.  An empty
  address implies a bind to 0.0.0.0 or ::. It's still possible to distinguish on
  address via the prefix/suffix matching in FilterChainMatch after connection.
  For clusters, an address may be either an IP or hostname to be resolved via
  DNS.  If it is a hostname, resolver_name should be set.
  
  
.. _envoy_api_field_SocketAddress.port_value:

port_value
  (`uint32 <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) 
  
  Only one of port_value, named_port may be set.
  
.. _envoy_api_field_SocketAddress.named_port:

named_port
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) This is only valid if DNS SRV or if resolver_name is specified below
  and the named resolver is capable of named port resolution.
  
  
  Only one of port_value, named_port may be set.
  
.. _envoy_api_field_SocketAddress.resolver_name:

resolver_name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The name of the resolver. This must have been registered with Envoy. If this is
  empty, a context dependent default applies. If address is a hostname this
  should be set.  If the address is a concrete IP address, no resolution will occur.
  
  

.. _envoy_api_enum_SocketAddress.Protocol:

Enum SocketAddress.Protocol
---------------------------


.. _envoy_api_enum_value_SocketAddress.Protocol.TCP:

TCP
  *(DEFAULT)* ⁣
  
.. _envoy_api_enum_value_SocketAddress.Protocol.UDP:

UDP
  ⁣
  

.. _envoy_api_msg_BindConfig:

BindConfig
----------


.. code-block:: json

  {
    "source_address": "{...}"
  }

.. _envoy_api_field_BindConfig.source_address:

source_address
  (:ref:`SocketAddress <envoy_api_msg_SocketAddress>`, *REQUIRED*) The address to bind to when creating a socket.
  
  


.. _envoy_api_msg_Address:

Address
-------

Addresses specify either a logical or physical address and port, which are
used to tell Envoy where to bind/listen, connect to upstream and find
management servers.

.. code-block:: json

  {
    "socket_address": "{...}",
    "pipe": "{...}"
  }

.. _envoy_api_field_Address.socket_address:

socket_address
  (:ref:`SocketAddress <envoy_api_msg_SocketAddress>`) 
  
  Only one of socket_address, pipe may be set.
  
.. _envoy_api_field_Address.pipe:

pipe
  (:ref:`Pipe <envoy_api_msg_Pipe>`) 
  
  Only one of socket_address, pipe may be set.
  


.. _envoy_api_msg_CidrRange:

CidrRange
---------

CidrRange specifies an IP Address and a prefix length to construct
the subnet mask.

.. code-block:: json

  {
    "address_prefix": "...",
    "prefix_len": "{...}"
  }

.. _envoy_api_field_CidrRange.address_prefix:

address_prefix
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) 
  
.. _envoy_api_field_CidrRange.prefix_len:

prefix_len
  (`UInt32Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint32value>`_) 
  

